// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.computerlyrik.spring.securityobjects.example.web;

import de.computerlyrik.spring.securityobjects.example.domain.Category;
import de.computerlyrik.spring.securityobjects.example.domain.Item;
import de.computerlyrik.spring.securityobjects.example.web.CategoryBean;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect CategoryBean_Roo_ManagedBean {
    
    declare @type: CategoryBean: @ManagedBean(name = "categoryBean");
    
    declare @type: CategoryBean: @SessionScoped;
    
    private String CategoryBean.name = "Categorys";
    
    private Category CategoryBean.category;
    
    private List<Category> CategoryBean.allCategorys;
    
    private boolean CategoryBean.dataVisible = false;
    
    private List<String> CategoryBean.columns;
    
    private HtmlPanelGrid CategoryBean.createPanelGrid;
    
    private HtmlPanelGrid CategoryBean.editPanelGrid;
    
    private HtmlPanelGrid CategoryBean.viewPanelGrid;
    
    private boolean CategoryBean.createDialogVisible = false;
    
    private List<Item> CategoryBean.selectedItems;
    
    @PostConstruct
    public void CategoryBean.init() {
        columns = new ArrayList<String>();
        columns.add("content");
    }
    
    public String CategoryBean.getName() {
        return name;
    }
    
    public List<String> CategoryBean.getColumns() {
        return columns;
    }
    
    public List<Category> CategoryBean.getAllCategorys() {
        return allCategorys;
    }
    
    public void CategoryBean.setAllCategorys(List<Category> allCategorys) {
        this.allCategorys = allCategorys;
    }
    
    public String CategoryBean.findAllCategorys() {
        allCategorys = Category.findAllCategorys();
        dataVisible = !allCategorys.isEmpty();
        return null;
    }
    
    public boolean CategoryBean.isDataVisible() {
        return dataVisible;
    }
    
    public void CategoryBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid CategoryBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void CategoryBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid CategoryBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void CategoryBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid CategoryBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void CategoryBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid CategoryBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText contentCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contentCreateOutput.setId("contentCreateOutput");
        contentCreateOutput.setValue("Content:   ");
        htmlPanelGrid.getChildren().add(contentCreateOutput);
        
        InputText contentCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        contentCreateInput.setId("contentCreateInput");
        contentCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoryBean.category.content}", String.class));
        htmlPanelGrid.getChildren().add(contentCreateInput);
        
        Message contentCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        contentCreateInputMessage.setId("contentCreateInputMessage");
        contentCreateInputMessage.setFor("contentCreateInput");
        contentCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(contentCreateInputMessage);
        
        HtmlOutputText itemsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsCreateOutput.setId("itemsCreateOutput");
        itemsCreateOutput.setValue("Items:   ");
        htmlPanelGrid.getChildren().add(itemsCreateOutput);
        
        HtmlOutputText itemsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsCreateInput.setId("itemsCreateInput");
        itemsCreateInput.setValue("This relationship is managed from the Item side");
        htmlPanelGrid.getChildren().add(itemsCreateInput);
        
        Message itemsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itemsCreateInputMessage.setId("itemsCreateInputMessage");
        itemsCreateInputMessage.setFor("itemsCreateInput");
        itemsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itemsCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CategoryBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText contentEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contentEditOutput.setId("contentEditOutput");
        contentEditOutput.setValue("Content:   ");
        htmlPanelGrid.getChildren().add(contentEditOutput);
        
        InputText contentEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        contentEditInput.setId("contentEditInput");
        contentEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoryBean.category.content}", String.class));
        htmlPanelGrid.getChildren().add(contentEditInput);
        
        Message contentEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        contentEditInputMessage.setId("contentEditInputMessage");
        contentEditInputMessage.setFor("contentEditInput");
        contentEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(contentEditInputMessage);
        
        HtmlOutputText itemsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsEditOutput.setId("itemsEditOutput");
        itemsEditOutput.setValue("Items:   ");
        htmlPanelGrid.getChildren().add(itemsEditOutput);
        
        HtmlOutputText itemsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsEditInput.setId("itemsEditInput");
        itemsEditInput.setValue("This relationship is managed from the Item side");
        htmlPanelGrid.getChildren().add(itemsEditInput);
        
        Message itemsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itemsEditInputMessage.setId("itemsEditInputMessage");
        itemsEditInputMessage.setFor("itemsEditInput");
        itemsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itemsEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CategoryBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText contentLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contentLabel.setId("contentLabel");
        contentLabel.setValue("Content:   ");
        htmlPanelGrid.getChildren().add(contentLabel);
        
        HtmlOutputText contentValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contentValue.setId("contentValue");
        contentValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoryBean.category.content}", String.class));
        htmlPanelGrid.getChildren().add(contentValue);
        
        HtmlOutputText itemsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsLabel.setId("itemsLabel");
        itemsLabel.setValue("Items:   ");
        htmlPanelGrid.getChildren().add(itemsLabel);
        
        HtmlOutputText itemsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsValue.setId("itemsValue");
        itemsValue.setValue("This relationship is managed from the Item side");
        htmlPanelGrid.getChildren().add(itemsValue);
        
        return htmlPanelGrid;
    }
    
    public Category CategoryBean.getCategory() {
        if (category == null) {
            category = new Category();
        }
        return category;
    }
    
    public void CategoryBean.setCategory(Category category) {
        this.category = category;
    }
    
    public List<Item> CategoryBean.getSelectedItems() {
        return selectedItems;
    }
    
    public void CategoryBean.setSelectedItems(List<Item> selectedItems) {
        if (selectedItems != null) {
            category.setItems(new HashSet<Item>(selectedItems));
        }
        this.selectedItems = selectedItems;
    }
    
    public String CategoryBean.onEdit() {
        if (category != null && category.getItems() != null) {
            selectedItems = new ArrayList<Item>(category.getItems());
        }
        return null;
    }
    
    public boolean CategoryBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void CategoryBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String CategoryBean.displayList() {
        createDialogVisible = false;
        findAllCategorys();
        return "category";
    }
    
    public String CategoryBean.displayCreateDialog() {
        category = new Category();
        createDialogVisible = true;
        return "category";
    }
    
    public String CategoryBean.persist() {
        String message = "";
        if (category.getId() != null) {
            category.merge();
            message = "Successfully updated";
        } else {
            category.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCategorys();
    }
    
    public String CategoryBean.delete() {
        category.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCategorys();
    }
    
    public void CategoryBean.reset() {
        category = null;
        selectedItems = null;
        createDialogVisible = false;
    }
    
    public void CategoryBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
